### ===========================================
### MESSAGE API TESTS
### Base URL: http://localhost:8080
### Tip: In VS Code/JetBrains REST Client, place cursor on a request and Run
### ===========================================

### ===========================================
### SETUP HELPERS (Run these first if needed)
### ===========================================

### Create test chat between users (if not exist)
POST http://localhost:8080/api/chats/find-or-create-direct
Content-Type: application/json

{
    "userId1": 10,
    "userId2": 11
}

### ===========================================
### 1. SEND MESSAGE (Gửi tin nhắn) - DETAILED TESTS
### ===========================================

### 1.1 Send valid text message (EXPECTED: 201 Created)
POST http://localhost:8080/api/messages
Content-Type: application/json

{
    "chat_id": 1,
    "sender_id": 10,
    "content": "second message!",
    "media_url": null
}

### ===========================================
### 2. GET MESSAGES FOR CHAT (Lấy tin nhắn của chat)
### ===========================================

### 2.1 Get all messages in chat (replace {chatId} and {userId})
GET http://localhost:8080/api/messages/chat/13?userId=10

###

### 2.2 Get messages for another user
GET http://localhost:8080/api/messages/chat/1?userId=2

###

### 2.3 Test with invalid chat ID
GET http://localhost:8080/api/messages/chat/999?userId=1

###

### 2.4 Test with invalid user ID
GET http://localhost:8080/api/messages/chat/1?userId=999

### ===========================================
### 3. GET SPECIFIC MESSAGE (Lấy tin nhắn cụ thể)
### ===========================================

### 3.1 Get message by ID (replace {messageId} and {userId})
GET http://localhost:8080/api/messages/1?userId=1

###

### 3.2 Test with invalid message ID
GET http://localhost:8080/api/messages/999?userId=1

###

### 3.3 Test access message user is not member of chat
GET http://localhost:8080/api/messages/1?userId=999

### ===========================================
### 4. MARK MESSAGE AS READ (Đánh dấu đã đọc)
### ===========================================

### 4.1 Mark a specific message as read
POST http://localhost:8080/api/messages/1/read?userId=2

###

### 4.2 Mark message as read again (should be idempotent)
POST http://localhost:8080/api/messages/1/read?userId=2

###

### 4.3 Test with invalid message ID
POST http://localhost:8080/api/messages/999/read?userId=1

###

### 4.4 Test with invalid user ID
POST http://localhost:8080/api/messages/1/read?userId=999

### ===========================================
### 5. MARK ALL MESSAGES AS READ (Đánh dấu tất cả đã đọc)
### ===========================================

### 5.1 Mark all messages in chat as read
POST http://localhost:8080/api/messages/chat/1/read-all?userId=2

###

### 5.2 Test with invalid chat ID
POST http://localhost:8080/api/messages/chat/999/read-all?userId=1

###

### 5.3 Test with invalid user ID
POST http://localhost:8080/api/messages/chat/1/read-all?userId=999

### ===========================================
### 6. DELETE MESSAGE (Xóa tin nhắn)
### ===========================================

### 6.1 Delete a message (only sender can delete)
DELETE http://localhost:8080/api/messages/1?userId=1

###

### 6.2 Try to delete message as non-sender (should fail)
DELETE http://localhost:8080/api/messages/2?userId=2

###

### 6.3 Test with invalid message ID
DELETE http://localhost:8080/api/messages/999?userId=1

###

### 6.4 Test with invalid user ID
DELETE http://localhost:8080/api/messages/1?userId=999

### ===========================================
### 7. INTEGRATION TESTS (Test tích hợp)
### ===========================================

### 7.1 Complete flow: Send message -> Get messages -> Mark as read
# First, send a message
POST http://localhost:8080/api/messages
Content-Type: application/json

{
    "chat_id": 1,
    "sender_id": 1,
    "content": "Integration test message",
    "media_url": null
}

###

# Then get messages to see the new message
GET http://localhost:8080/api/messages/chat/1?userId=2

###

# Mark the message as read (use actual message ID from previous response)
POST http://localhost:8080/api/messages/1/read?userId=2

###

# Get messages again to see read status
GET http://localhost:8080/api/messages/chat/1?userId=2

### ===========================================
### 8. EDGE CASES & ERROR HANDLING
### ===========================================

### 8.1 Send empty message (both content and media_url are null/empty)
POST http://localhost:8080/api/messages
Content-Type: application/json

{
    "chat_id": 1,
    "sender_id": 1,
    "content": "",
    "media_url": ""
}

###

### 8.2 Send message with missing required fields
POST http://localhost:8080/api/messages
Content-Type: application/json

{
    "sender_id": 1,
    "content": "Missing chat_id"
}

###

### 8.3 Send message with null values
POST http://localhost:8080/api/messages
Content-Type: application/json

{
    "chat_id": null,
    "sender_id": null,
    "content": "Null values test",
    "media_url": null
}

### ===========================================
### NOTES FOR TESTING:
### ===========================================
# 1. Replace placeholder IDs (1, 2, 999) with actual IDs from your database
# 2. Make sure users and chats exist before testing
# 3. Create test users and chats using the Chat API first if needed
# 4. Check database to verify the actual IDs to use
# 5. Some tests are designed to fail - check the response status codes
# 6. For integration tests, use the actual message IDs returned from previous requests

### ===========================================
### SETUP HELPERS (Run these first if needed)
### ===========================================

### Create test users (if not exist)
# Refer to user creation APIs in other REST files

### Create test chat between users (if not exist)
POST http://localhost:8080/api/chats/find-or-create-direct
Content-Type: application/json

{
    "userId1": 1,
    "userId2": 2
}